// Check if there's an edge between the last vertex in the path and the current vertex
    if (graph[path[pos - 1]][v] == 0)
        return false;

    // Check if the vertex has already been included in the path
    for (int i = 0; i < pos; i++)
        if (path[i] == v)
            return false;

    return true;

// Base case: If all vertices are included in the path
    if (pos == V) {
        // And there's an edge from the last vertex to the first vertex
        if (graph[path[pos - 1]][path[0]] == 1)
            return true;
        else
            return false;
    }
   // Try different vertices as the next candidate in the Hamiltonian Cycle
    for (int v = 1; v < V; v++) {
        if (isSafe(v, graph, path, pos)) {
            path[pos] = v;

            // Recur to construct the rest of the path
            if (hamCycleUtil(graph, path, pos + 1))
                return true;

            // If adding vertex v doesn't lead to a solution, remove it (backtracking)
            path[pos] = -1;
        }
    }
    return false;
int* path = (int*)malloc(V * sizeof(int));

    // Initialize the path array with -1
    for (int i = 0; i < V; i++)
        path[i] = -1;

    // Let the first vertex in the path be 0
    path[0] = 0;

    if (hamCycleUtil(graph, path, 1) == false) {
        printf("Solution does not exist\n");
        free(path);
        return false;
    }

    printSolution(path);
    free(path);
    return true;
	 printf("Following is one Hamiltonian Cycle: \n");
    for (int i = 0; i < V; i++)
        printf("%d ", path[i]);
    printf("%d\n", path[0]);  // Returning to the first vertex
